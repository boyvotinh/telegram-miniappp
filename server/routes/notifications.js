const express = require('express');
const router = express.Router();
const cron = require('node-cron');
const db = require('../db');
const { bot } = require('../bot');

// H√†m g·ª≠i th√¥ng b√°o cho user
async function sendTaskNotification(userId, task) {
  try {
    const message = `
üîî *Nh·∫Øc nh·ªü nhi·ªám v·ª• s·∫Øp ƒë·∫øn h·∫°n*

üìã *${task.title}*
üìù ${task.description}
‚è∞ H·∫°n ch√≥t: ${new Date(task.deadline).toLocaleString('vi-VN')}
    `;

    await bot.sendMessage(userId, message, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true 
    });
    
    console.log(`ƒê√£ g·ª≠i th√¥ng b√°o nhi·ªám v·ª• cho user ${userId}`);
  } catch (error) {
    console.error('L·ªói khi g·ª≠i th√¥ng b√°o:', error);
  }
}

// H√†m g·ª≠i th√¥ng b√°o t·ªïng h·ª£p nhi·ªám v·ª• trong ng√†y
async function sendDailyTaskSummary(userId, tasks) {
  try {
    let message = `üìÖ *T·ªïng h·ª£p nhi·ªám v·ª• ng√†y ${new Date().toLocaleDateString('vi-VN')}*\n\n`;

    // Nh√≥m nhi·ªám v·ª• theo tr·∫°ng th√°i
    const pendingTasks = tasks.filter(t => t.status !== 'completed');
    const completedTasks = tasks.filter(t => t.status === 'completed');

    // Th√™m nhi·ªám v·ª• ƒëang th·ª±c hi·ªán
    if (pendingTasks.length > 0) {
      message += `‚è≥ *Nhi·ªám v·ª• ƒëang th·ª±c hi·ªán:*\n\n`;
      pendingTasks.forEach((task, index) => {
        const deadline = new Date(task.deadline);
        const isOverdue = deadline < new Date();
        
        message += `*${index + 1}. ${task.title}*\n`;
        message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        message += `- H·∫°n ch√≥t: ${deadline.toLocaleString('vi-VN')} ${isOverdue ? '‚ö†Ô∏è (ƒê√£ qua h·∫°n)' : ''}\n\n`;
      });
    }

    // Th√™m nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
    if (completedTasks.length > 0) {
      message += `‚úÖ *Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh:*\n\n`;
      completedTasks.forEach((task, index) => {
        const deadline = new Date(task.deadline);
        message += `*${index + 1}. ${task.title}*\n`;
        message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        message += `- H·∫°n ch√≥t: ${deadline.toLocaleString('vi-VN')}\n\n`;
      });
    }

    if (pendingTasks.length === 0 && completedTasks.length === 0) {
      message += `B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o trong ng√†y h√¥m nay.`;
    }

    await bot.sendMessage(userId, message, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true 
    });
    
    console.log(`ƒê√£ g·ª≠i t·ªïng h·ª£p nhi·ªám v·ª• cho user ${userId}`);
  } catch (error) {
    console.error('L·ªói khi g·ª≠i t·ªïng h·ª£p nhi·ªám v·ª•:', error);
  }
}

// H√†m ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o nhi·ªám v·ª• trong ng√†y
async function checkDailyTasks() {
  try {
    console.log('ƒêang ki·ªÉm tra nhi·ªám v·ª• trong ng√†y...');
    
    // L·∫•y t·∫•t c·∫£ nhi·ªám v·ª• c·ªßa ng√†y h√¥m nay
    const [tasks] = await db.query(`
      SELECT t.*, u.telegram_id 
      FROM tasks t
      JOIN users u ON t.assigned_to = u.id
      WHERE DATE(t.deadline) = CURDATE()
      OR (t.status != 'completed' AND t.deadline < CURDATE())
    `);

    console.log(`T√¨m th·∫•y ${tasks.length} nhi·ªám v·ª• trong ng√†y`);

    // Nh√≥m nhi·ªám v·ª• theo user
    const userTasks = {};
    tasks.forEach(task => {
      if (task.telegram_id) {
        if (!userTasks[task.telegram_id]) {
          userTasks[task.telegram_id] = [];
        }
        userTasks[task.telegram_id].push(task);
      }
    });

    // G·ª≠i th√¥ng b√°o cho t·ª´ng user
    for (const [userId, userTaskList] of Object.entries(userTasks)) {
      await sendDailyTaskSummary(userId, userTaskList);
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra nhi·ªám v·ª•:', error);
  }
}

// API endpoint ƒë·ªÉ ki·ªÉm tra th·ªß c√¥ng
router.post('/check-tasks', async (req, res) => {
  try {
    await checkDailyTasks();
    res.json({ message: 'ƒê√£ ki·ªÉm tra nhi·ªám v·ª•' });
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra nhi·ªám v·ª•:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ ki·ªÉm tra nhi·ªám v·ª•' });
  }
});

// Ch·∫°y ki·ªÉm tra m·ªói ng√†y l√∫c 8:00 s√°ng
cron.schedule('0 8 * * *', () => {
  console.log('Ch·∫°y cron job ki·ªÉm tra nhi·ªám v·ª• h√†ng ng√†y...');
  checkDailyTasks();
});

// Ch·∫°y ki·ªÉm tra ngay khi kh·ªüi ƒë·ªông server
console.log('Kh·ªüi ƒë·ªông service th√¥ng b√°o nhi·ªám v·ª•...');
checkDailyTasks();

module.exports = router;
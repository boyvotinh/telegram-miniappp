const db = require('./db');
const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot('7969413948:AAHVKr9OvRVkHTBSNecWDlEMiDZBn7mNcm4', { polling: true });

// L·∫Øng nghe l·ªánh /start ƒë·ªÉ g·ª≠i n√∫t m·ªü MiniApp
bot.onText(/\/start/, async (msg) => {
  const telegramId = msg.from.id;
  const name = msg.from.username || msg.from.first_name;
  const chatId = msg.chat.id;

  try {
    // G·ª≠i th√¥ng b√°o ch·ªù
    await bot.sendMessage(chatId, '‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu, vui l√≤ng ƒë·ª£i...');

    const [results] = await db.query('SELECT * FROM users WHERE telegram_id = ?', [telegramId]);

    if (results.length === 0) {
      // N·∫øu user CH∆ØA c√≥ th√¨ m·ªõi insert
      await db.query('INSERT INTO users (telegram_id, name) VALUES (?, ?)', [telegramId, name]);
    }

    // Sau khi insert xong ho·∫∑c n·∫øu ƒë√£ c√≥ user, g·ª≠i n√∫t MiniApp
    sendWebAppButton(chatId, name);
  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω /start:', error);
    bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.');
  }
});

// L·∫Øng nghe l·ªánh /task ƒë·ªÉ g·ª≠i th√¥ng b√°o nhi·ªám v·ª•
bot.onText(/\/task/, async (msg) => {
  const telegramId = msg.from.id;
  const name = msg.from.username || msg.from.first_name;
  const chatId = msg.chat.id;

  try {
    // G·ª≠i th√¥ng b√°o ch·ªù
    await bot.sendMessage(chatId, '‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu, vui l√≤ng ƒë·ª£i...');

    const [results] = await db.query('SELECT * FROM users WHERE telegram_id = ?', [telegramId]);

    if (results.length === 0) {
      // N·∫øu user CH∆ØA c√≥ th√¨ insert
      await db.query('INSERT INTO users (telegram_id, name) VALUES (?, ?)', [telegramId, name]);
    }
    
    // G·ª≠i th√¥ng b√°o nhi·ªám v·ª• h√¥m nay
    await sendDailyTaskNotification(chatId, telegramId);

  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω /task:', error);
    bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin nhi·ªám v·ª•.');
  }
});

// H√†m g·ª≠i n√∫t WebApp
function sendWebAppButton(chatId, name) {
  bot.sendMessage(chatId, `üëã Ch√†o ${name}! Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü ·ª©ng d·ª•ng:`, {
    reply_markup: {
      inline_keyboard: [[
        {
          text: "üöÄ M·ªü ·ª©ng d·ª•ng",
          web_app: { url: "https://telegram-miniappp.vercel.app/" }
        }
      ]]
    }
  });
}
// H√†m g·ª≠i th√¥ng b√°o nhi·ªám v·ª• h√¥m nay cho ng∆∞·ªùi d√πng
async function sendDailyTaskNotification(chatId, telegramId) {
  try {
    // ƒê·∫ßu ti√™n l·∫•y user_id t·ª´ telegram_id
    const [userResults] = await db.query('SELECT id FROM users WHERE telegram_id = ?', [telegramId]);

    if (userResults.length === 0) {
      return bot.sendMessage(chatId, '‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
    }

    const userId = userResults[0].id;
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c nhi·ªám v·ª• qua h·∫°n
    await db.query(
      `UPDATE tasks SET status = 'completed' WHERE assigned_to = ? AND deadline < ? AND (status IS NULL OR status != 'completed')`,
      [userId, today]
    );

    // L·∫•y 2 nhi·ªám v·ª• completed g·∫ßn nh·∫•t
    const [completedTasks] = await db.query(
      `SELECT DISTINCT t.* FROM tasks t WHERE t.assigned_to = ? AND t.status = 'completed' ORDER BY t.deadline DESC LIMIT 2`,
      [userId]
    );

    // L·∫•y 3 nhi·ªám v·ª• pending g·∫ßn nh·∫•t
    const [pendingTasks] = await db.query(
      `SELECT DISTINCT t.* FROM tasks t WHERE t.assigned_to = ? AND (t.status IS NULL OR t.status != 'completed') ORDER BY t.deadline ASC LIMIT 3`,
      [userId]
    );

    const allTasks = [...completedTasks, ...pendingTasks];

    if (allTasks.length === 0) {
      return bot.sendMessage(chatId, '‚ùó B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o.');
    }

    let message = `üìÖ *Danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n*\n\n`;

    // Hi·ªÉn th·ªã nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
    if (completedTasks.length > 0) {
      message += `‚úÖ *Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh:*\n\n`;
      completedTasks.forEach((task, index) => {
        const deadline = new Date(task.deadline);
        const deadlineFormatted = deadline.toLocaleDateString('vi-VN');
        
        message += `*${index + 1}. ${task.title}*\n`;
        message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        message += `- H·∫°n ch√≥t: ${deadlineFormatted}\n\n`;
      });
    }

    // Hi·ªÉn th·ªã nhi·ªám v·ª• ƒëang th·ª±c hi·ªán
    if (pendingTasks.length > 0) {
      message += `‚è≥ *Nhi·ªám v·ª• ƒëang th·ª±c hi·ªán:*\n\n`;
      pendingTasks.forEach((task, index) => {
        const deadline = new Date(task.deadline);
        const deadlineFormatted = deadline.toLocaleDateString('vi-VN');
        const isOverdue = deadline < today;
        
        message += `*${index + 1}. ${task.title}*\n`;
        message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        message += `- H·∫°n ch√≥t: ${deadlineFormatted} ${isOverdue ? '‚ö†Ô∏è (ƒê√£ qua h·∫°n)' : ''}\n\n`;
      });
    }

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('L·ªói khi g·ª≠i th√¥ng b√°o nhi·ªám v·ª• h√†ng ng√†y:', error);
    bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin nhi·ªám v·ª•.');
  }
}

module.exports = {
  bot,
};

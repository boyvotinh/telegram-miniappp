const db = require('./db');
const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot('7969413948:AAHVKr9OvRVkHTBSNecWDlEMiDZBn7mNcm4', { polling: true });

// L·∫Øng nghe l·ªánh /start ƒë·ªÉ g·ª≠i n√∫t m·ªü MiniApp
bot.onText(/\/start/, async (msg) => {
  const telegramId = msg.from.id;
  const name = msg.from.username || msg.from.first_name;
  const chatId = msg.chat.id;

  // G·ª≠i th√¥ng b√°o ch·ªù
  await bot.sendMessage(chatId, '‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu, vui l√≤ng ƒë·ª£i...');

  db.query('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, results) => {
    if (err) {
      console.error(err);
      return bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu.');
    }

    if (results.length === 0) {
      // N·∫øu user CH∆ØA c√≥ th√¨ m·ªõi insert
      db.query('INSERT INTO users (telegram_id, name) VALUES (?, ?)', [telegramId, name], (insertErr) => {
        if (insertErr) {
          console.error(insertErr);
          return bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng.');
        }

        // Sau khi insert xong, g·ª≠i n√∫t MiniApp
        sendWebAppButton(chatId, name);
      });
    } else {
      // N·∫øu ƒë√£ c√≥ user ‚ûî ch·ªâ c·∫ßn g·ª≠i n√∫t
      sendWebAppButton(chatId, name);
    }
  });
});

// L·∫Øng nghe l·ªánh /task ƒë·ªÉ g·ª≠i th√¥ng b√°o nhi·ªám v·ª•
bot.onText(/\/task/, async (msg) => {
  const telegramId = msg.from.id;
  const name = msg.from.username || msg.from.first_name;
  const chatId = msg.chat.id;

  // G·ª≠i th√¥ng b√°o ch·ªù
  await bot.sendMessage(chatId, '‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu, vui l√≤ng ƒë·ª£i...');

  db.query('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, results) => {
    if (err) {
      console.error(err);
      return bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu.');
    }

    if (results.length === 0) {
      // N·∫øu user CH∆ØA c√≥ th√¨ insert v√† g·ª≠i n√∫t MiniApp
      db.query('INSERT INTO users (telegram_id, name) VALUES (?, ?)', [telegramId, name], (insertErr) => {
        if (insertErr) {
          console.error(insertErr);
          return bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng.');
        }

        // Sau khi insert xong, g·ª≠i n√∫t MiniApp v√† nhi·ªám v·ª• h√¥m nay
        sendDailyTaskNotification(chatId, telegramId);
      });
    } else {
      // N·∫øu ƒë√£ c√≥ user ‚ûî g·ª≠i n√∫t v√† th√¥ng b√°o nhi·ªám v·ª• h√¥m nay
      sendDailyTaskNotification(chatId, telegramId);
    }
  });
});

// H√†m g·ª≠i n√∫t WebApp
function sendWebAppButton(chatId, name) {
  bot.sendMessage(chatId, `üëã Ch√†o ${name}! Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü ·ª©ng d·ª•ng:`, {
    reply_markup: {
      inline_keyboard: [[
        {
          text: "üöÄ M·ªü ·ª©ng d·ª•ng",
          web_app: { url: "https://telegram-miniappp.vercel.app/" }
        }
      ]]
    }
  });
}
// H√†m g·ª≠i th√¥ng b√°o nhi·ªám v·ª• h√¥m nay cho ng∆∞·ªùi d√πng
async function sendDailyTaskNotification(chatId, telegramId) {
  // ƒê·∫ßu ti√™n l·∫•y user_id t·ª´ telegram_id
  db.query(
    'SELECT id FROM users WHERE telegram_id = ?',
    [telegramId],
    (err, userResults) => {
      if (err) {
        console.error(err);
        return bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng.');
      }

      if (userResults.length === 0) {
        return bot.sendMessage(chatId, '‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
      }

      const userId = userResults[0].id;
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c nhi·ªám v·ª• qua h·∫°n
      db.query(
        `UPDATE tasks 
         SET status = 'completed' 
         WHERE assigned_to = ? 
         AND deadline < ? 
         AND (status IS NULL OR status != 'completed')`,
        [userId, today],
        (updateErr) => {
          if (updateErr) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i nhi·ªám v·ª•:', updateErr);
          }

          // L·∫•y 2 nhi·ªám v·ª• completed g·∫ßn nh·∫•t
          db.query(
            `SELECT DISTINCT t.* 
             FROM tasks t 
             WHERE t.assigned_to = ? AND t.status = 'completed'
             ORDER BY t.deadline DESC
             LIMIT 2`,
            [userId],
            (err, completedTasks) => {
              if (err) {
                console.error(err);
                return bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin nhi·ªám v·ª•.');
              }

              // L·∫•y 3 nhi·ªám v·ª• pending g·∫ßn nh·∫•t
              db.query(
                `SELECT DISTINCT t.* 
                 FROM tasks t 
                 WHERE t.assigned_to = ? AND (t.status IS NULL OR t.status != 'completed')
                 ORDER BY t.deadline ASC
                 LIMIT 3`,
                [userId],
                (err, pendingTasks) => {
                  if (err) {
                    console.error(err);
                    return bot.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra khi truy xu·∫•t th√¥ng tin nhi·ªám v·ª•.');
                  }

                  const allTasks = [...completedTasks, ...pendingTasks];
                  
                  if (allTasks.length === 0) {
                    return bot.sendMessage(chatId, '‚ùó B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o.');
                  }

                  let message = `üìÖ *Danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n*\n\n`;

                  // Hi·ªÉn th·ªã nhi·ªám v·ª• ƒë√£ ho√†n th√†nh
                  if (completedTasks.length > 0) {
                    message += `‚úÖ *Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh:*\n\n`;
                    completedTasks.forEach((task, index) => {
                      const deadline = new Date(task.deadline);
                      const deadlineFormatted = deadline.toLocaleDateString('vi-VN');
                      
                      message += `*${index + 1}. ${task.title}*\n`;
                      message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
                      message += `- H·∫°n ch√≥t: ${deadlineFormatted}\n\n`;
                    });
                  }

                  // Hi·ªÉn th·ªã nhi·ªám v·ª• ƒëang th·ª±c hi·ªán
                  if (pendingTasks.length > 0) {
                    message += `‚è≥ *Nhi·ªám v·ª• ƒëang th·ª±c hi·ªán:*\n\n`;
                    pendingTasks.forEach((task, index) => {
                      const deadline = new Date(task.deadline);
                      const deadlineFormatted = deadline.toLocaleDateString('vi-VN');
                      const isOverdue = deadline < today;
                      
                      message += `*${index + 1}. ${task.title}*\n`;
                      message += `- M√¥ t·∫£: ${task.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
                      message += `- H·∫°n ch√≥t: ${deadlineFormatted} ${isOverdue ? '‚ö†Ô∏è (ƒê√£ qua h·∫°n)' : ''}\n\n`;
                    });
                  }

                  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
                }
              );
            }
          );
        }
      );
    }
  );
}
